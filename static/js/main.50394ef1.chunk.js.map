{"version":3,"sources":["components/Sidebar.jsx","components/Editor.jsx","containers/data.js","containers/App.jsx","reportWebVitals.js","index.js"],"names":["Sidebar","props","noteElements","notes","map","note","index","react_default","a","createElement","key","id","className","concat","currentNote","onClick","setCurrentNoteId","body","split","event","deleteNote","newNote","Editor","_ref","updateNote","_React$useState","React","useState","_React$useState2","Object","slicedToArray","selectedTab","setSelectedTab","converter","Showdown","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","js_default","value","onChange","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","makeHtml","minEditorHeight","heightUnits","App","_useState","JSON","parse","localStorage","getItem","_useState2","setNotes","currentNoteId","createNewNote","nanoid","prevNotes","toConsumableArray","findCurrentNote","find","useEffect","setItem","stringify","length","react_split_es","sizes","direction","noteId","stopPropagation","oldNotes","filter","text","newNoteArray","oldNote","unshift","objectSpread","push","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App_App"],"mappings":"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","file":"static/js/main.50394ef1.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport default function Sidebar(props) {\r\n    const noteElements = props.notes.map((note, index) => (\r\n        <div key={note.id}>\r\n            <div\r\n                className={`title ${\r\n                    note.id === props.currentNote.id ? \"selected-note\" : \"\"\r\n                }`}\r\n                onClick={() => props.setCurrentNoteId(note.id)}\r\n            >\r\n                <h4 className=\"text-snippet\"> \r\n                { note.body.split('\\n')[0]} \r\n                </h4>\r\n                <button \r\n                    className=\"delete-btn\"\r\n                    onClick={(event) => props.deleteNote(event, note.id)}\r\n                >\r\n                    <i className=\"gg-trash trash-icon\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    ))\r\n\r\n    return (\r\n        <section className=\"pane sidebar\">\r\n            <div className=\"sidebar--header\">\r\n                <h3>Notes</h3>\r\n                <button className=\"new-note\" onClick={props.newNote}>+</button>\r\n            </div>\r\n            {noteElements}\r\n        </section>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport ReactMde from \"react-mde\"\r\nimport Showdown from \"showdown\"\r\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\r\n\r\nexport default function Editor({ currentNote, updateNote }) {\r\n    const [selectedTab, setSelectedTab] = React.useState(\"write\")\r\n\r\n    const converter = new Showdown.Converter({\r\n        tables: true,\r\n        simplifiedAutoLink: true,\r\n        strikethrough: true,\r\n        tasklists: true,\r\n    })  \r\n\r\n    return (\r\n        <section className=\"pane editor\">\r\n            <ReactMde\r\n                value={currentNote.body}\r\n                onChange={updateNote}\r\n                selectedTab={selectedTab}\r\n                onTabChange={setSelectedTab}\r\n                generateMarkdownPreview={(markdown) =>\r\n                    Promise.resolve(converter.makeHtml(markdown))\r\n                }\r\n                minEditorHeight={80}\r\n                heightUnits=\"vh\"\r\n            />\r\n        </section>\r\n    )\r\n}\r\n","export const data = [\r\n    {\r\n        id: 1,\r\n        body: `### This just in!\r\n\r\nMarkdown is an *awesome* way to write **very basic HTML** by typing manually\r\n\r\nIt can be used for:\r\n\r\n1. README files\r\n1. Slack and Discord messages\r\n1. **So much more!**\r\n\r\n---\r\n\r\nHere's a division ðŸ‘†`,\r\n    },\r\n    { id: 2, body: `a` },\r\n    { id: 3, body: `b` },\r\n    { id: 4, body: `c` },\r\n    { id: 5, body: `d` },\r\n    { id: 6, body: `e` },\r\n]\r\n","import React, {useEffect, useState} from \"react\"\r\nimport Sidebar from \"../components/Sidebar\"\r\nimport Editor from \"../components/Editor\"\r\nimport { data } from \"./data\"\r\nimport Split from \"react-split\"\r\nimport {nanoid} from \"nanoid\"\r\nimport \"./App.css\"\r\n\r\nexport default function App() {\r\n    const [notes, setNotes] = useState(() => JSON.parse(localStorage.getItem('localNotes')) || [])\r\n    const [currentNoteId, setCurrentNoteId] = React.useState(\r\n        (notes[0] && notes[0].id) || \"\"\r\n    )\r\n \r\n    useEffect(()=>{\r\n        localStorage.setItem('localNotes', JSON.stringify(notes)); \r\n    }, [notes]) \r\n    \r\n    \r\n    function createNewNote() {\r\n        const newNote = {\r\n            id: nanoid(),\r\n            body: \"# Type your markdown note's title here\"\r\n        }\r\n        setNotes(prevNotes => [newNote, ...prevNotes])\r\n        setCurrentNoteId(newNote.id)\r\n    }\r\n    \r\n    function updateNote(text) {\r\n        // my code meant to put the most recently-modified note at the top\r\n        setNotes(oldNotes => {\r\n            let newNoteArray = []\r\n            oldNotes.map(oldNote => {\r\n                return oldNote.id === currentNoteId?\r\n                newNoteArray.unshift({ ...oldNote, body: text }):\r\n                newNoteArray.push(oldNote)\r\n            })\r\n            return newNoteArray\r\n        })\r\n    }\r\n\r\n\r\n    // old code that worked but couldnt put the most recently-modified note at the top\r\n    // setNotes(oldNotes => {    \r\n    // oldNotes.map(oldNote => {\r\n    //     return oldNote.id === currentNoteId\r\n    //         ? { ...oldNote, body: text }\r\n    //         : oldNote\r\n    // })\r\n    // }\r\n\r\n\r\n    function deleteNote(event, noteId) {\r\n        event.stopPropagation()\r\n        setNotes(oldNotes => oldNotes.filter(notes => \r\n            notes.id !== noteId))\r\n    }\r\n    \r\n    function findCurrentNote() {\r\n        return notes.find(note => {\r\n            return note.id === currentNoteId\r\n        }) || notes[0]\r\n    }\r\n  \r\n    \r\n    return (\r\n        <main>\r\n        {\r\n            notes.length > 0 \r\n            ?\r\n            <Split \r\n                sizes={[30, 70]} \r\n                direction=\"horizontal\" \r\n                className=\"split\"\r\n            >\r\n                <Sidebar\r\n                    notes={notes}\r\n                    currentNote={findCurrentNote()}\r\n                    setCurrentNoteId={setCurrentNoteId}\r\n                    newNote={createNewNote}\r\n                    deleteNote={deleteNote}\r\n                />\r\n                {\r\n                    currentNoteId && \r\n                    notes.length > 0 &&\r\n                    <Editor \r\n                        currentNote={findCurrentNote()} \r\n                        updateNote={updateNote} \r\n                    />\r\n                }\r\n            </Split>\r\n            :\r\n            <div className=\"no-notes\">\r\n                <h1>You have no notes</h1>\r\n                <button \r\n                    className=\"first-note\" \r\n                    onClick={createNewNote}\r\n                >\r\n                    Create one now\r\n                </button>\r\n            </div>\r\n            \r\n        }\r\n        </main>\r\n    )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App /> \n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}